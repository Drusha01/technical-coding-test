@{
    ViewData["Title"] = "Departments";
}

<div class="w-full mx-auto p-6 bg-white rounded-xl">
    <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-bold">Departments</h2>

        <!-- Add Employee Button -->
        <button id="openModalBtn"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg shadow transition">
            Add Department
        </button>
    </div>

    <!-- Department Filter -->
    <div class="flex flex-col lg:flex-row gap-3">
        <div class="mb-4">
            <label for="departmentFilter" class="block text-sm font-medium text-gray-700 mb-1">
                Rows
            </label>
            <select id="paginationRows"
                    class="w-40 rounded-lg border border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700 px-2.5 py-2">
                <option value="5">5</option>
                <option selected value="10">10</option>
                <option value="30">30</option>
                <option value="50">50</option>
            </select>
        </div>
    </div>


    <!-- Department Table -->
    <div class="overflow-x-auto">
        <table id="DepartmentTable" class="min-w-full border border-gray-200 rounded-lg shadow-sm">
            <thead class="bg-blue-600 text-white">
                <tr>
                    <th class="px-4 py-2 text-left text-sm font-semibold">ID</th>
                    <th class="px-4 py-2 text-left text-sm font-semibold">Dept Name</th>
                    <th class="px-4 py-2 text-left text-sm font-semibold">Dept Code</th>
                    <th class="px-4 py-2 text-left text-sm font-semibold">Head</th>
                    <th class="px-4 py-2 text-center text-sm font-semibold">Action</th>

                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white"></tbody>
        </table>
        <div class="flex justify-between items-center mt-4">
            <span id="paginationInfo" class="text-sm font-medium"></span>
            <div>
                <button id="prevPageBtn" class="px-4 py-2 bg-gray-50 rounded hover:bg-gray-100 disabled:bg-gray-400 disabled:text-white disabled:border-0 border border-black">Previous</button>
                <button id="nextPageBtn" class="px-4 py-2 bg-gray-50 rounded hover:bg-gray-100 disabled:bg-gray-400 disabled:text-white disabled:border-0 border border-black">Next</button>
            </div>
        </div>
    </div>
</div>

<div id="AddDepartmentModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg w-full max-w-md p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold" id="ModalTitle">Add Department</h3>
            <button id="closeModalBtn" class="text-gray-500 hover:text-gray-700 border-none hover:border hover:border-1 hover:border-gray-800 p-2 rounded-1">
                <svg viewBox="0 0 24 24" width="20px" height="20px" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M16 8L8 16M8 8L16 16" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path> </g></svg>
            </button>
        </div>

        <!-- Department Form -->
        <form id="AddDepartmentForm" class="space-y-4">
            <div>
                <label class="block text-sm font-medium">Department Name <span class="text-red-800">*</span></label>
                <input type="text" id="Name" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div>
                <label class="block text-sm font-medium">Department Code <span class="text-red-800">*</span></label>
                <input type="text" id="Code" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div>
                <label class="block text-sm font-medium">Department Head</label>
                <select id="AddHead" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" >
                </select>
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" id="cancelBtn" class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save</button>
            </div>
        </form>
    </div>
</div>

<div id="EditDepartmentModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg w-full max-w-md p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold" id="EditModalTitle">Edit Department</h3>
            <button id="closeModalBtn" class="text-gray-500 hover:text-gray-700 border-none hover:border hover:border-1 hover:border-gray-800 p-2 rounded-1">
                <svg viewBox="0 0 24 24" width="20px" height="20px" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M16 8L8 16M8 8L16 16" stroke="currentColor" stroke-width="2" stroke-linecap="round"></path> </g></svg>
            </button>
        </div>

        <!-- Department Form -->
        <form id="EditDepartmentForm" class="space-y-4">
            <input type="number" name="Department_id" id="EditDepartmentId" value="" class="hidden" />
            <div>
                <label class="block text-sm font-medium">Department Name <span class="text-red-800">*</span></label>
                <input type="text" id="EditName" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div>
                <label class="block text-sm font-medium">Department Code <span class="text-red-800">*</span></label>
                <input type="text" id="EditCode" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div>
                <label class="block text-sm font-medium">Department Head</label>
                <select id="EditHead" class="w-full border rounded-lg px-3 py-2 focus:ring-blue-500 focus:border-blue-500">
                </select>
            </div>
            <div class="flex justify-end space-x-2">
                <button type="button" id="cancelBtn" class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save</button>
            </div>
        </form>
    </div>
</div>

</div>
@section Scripts {
    <script>
        $(function() {
            let currentPage = 1;
            let pageSize = 10; // Departments per page
            let totalPages = 1;

            // Render Departments
            function renderDepartments(data) {
                const tbody = $('#DepartmentTable tbody');
                tbody.empty();

                    if (!data || data.length === 0) {
                        const noDataRow = `
                            <tr>
                                <td colspan="6" class="text-center px-4 py-2 text-gray-500">
                                    No Departments found.
                                </td>
                            </tr>
                        `;
                        tbody.append(noDataRow);
                        $('#paginationInfo').text(`Page ${currentPage} of ${totalPages}`);
                        $('#prevPageBtn').prop('disabled', true);
                        $('#nextPageBtn').prop('disabled', true);
                        return;
                    }

                $.each(data, function(_, Department) {
                    const row = `
                        <tr class="hover:bg-gray-100 transition">
                            <td class="px-4 py-2">${Department.id}</td>
                            <td class="px-4 py-2">${Department.name}</td>
                            <td class="px-4 py-2">${Department.code}</td>
                            <td class="px-4 py-2">${Department.headName}</td>
                            <td class="px-4 py-2 flex justify-center space-x-2">
                                <button class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 edit-btn " data-id="${Department.id}">Edit</button>
                                <button class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 delete-btn" data-id="${Department.id}">Delete</button>
                            </td>
                        </tr>`;
                    tbody.append(row);
                });

                $('#paginationInfo').text(`Page ${currentPage} of ${totalPages}`);
                $('#prevPageBtn').prop('disabled', currentPage <= 1);
                $('#nextPageBtn').prop('disabled', currentPage >= totalPages);
            }

            // Load Departments (paginated)
            function loadDepartments(page = 1) {
                if($('#paginationRows').val()){
                    pageSize = $('#paginationRows').val();
                }
                const departmentId = $('#departmentFilter').val();
                let url = `/api/Departments?pageNumber=${page}&pageSize=${pageSize}`;
                if (departmentId) url += `&departmentId=${departmentId}`;

                $.getJSON(url, function(response) {
                    currentPage = response.pageNumber;
                    totalPages = response.totalPages;
                    renderDepartments(response.data);
                });
            }

            $('#paginationRows').change(function() {
                const department = $('#departmentFilter').val();
                currentPage = 1;
                if (department) {
                    loadDepartmentsByDepartment(department, currentPage);
                } else {
                    loadDepartments(); // fallback to all Departments without department filter
                }
            });

            // Pagination buttons
            $('#prevPageBtn').click(function() {
                const department = $('#departmentFilter').val();
                if (department && currentPage > 1) {
                    loadDepartmentsByDepartment(department, currentPage - 1);
                }else{
                    loadDepartments(currentPage - 1);
                }
            });

            $('#nextPageBtn').click(function() {
                const department = $('#departmentFilter').val();
                if (department) {
                    loadDepartmentsByDepartment(department, currentPage + 1);
                }else{
                    loadDepartments(currentPage + 1);
                }
            });

            // Load Employees into a select
            function loadEmployeesIntoSelect(selectId, selectedId = null) {
                $.getJSON('/api/employees/all', function(departments) {
                    const $select = $('#' + selectId);
                    $select.empty();
                    $select.append('<option value="">Select Head</option>');
                    $.each(departments, function(_, emp) {
                        const $option = $('<option>').val(emp.id).text(emp.firstName+' '+emp.lastName);
                        if (selectedId && emp.id === selectedId) $option.prop('selected', true);
                        $select.append($option);
                    });
                });
            }

            // Add Department Modal
            $('#openModalBtn').click(function() {
                $('#AddDepartmentForm')[0].reset();
                loadEmployeesIntoSelect('AddHead');
                $('#AddDepartmentModal').removeClass('hidden').addClass('flex');
            });

            // Close modals
            function closeModal($modal) {
                $modal.addClass('hidden').removeClass('flex');
            }
            $('#AddDepartmentModal, #EditDepartmentModal').on('click', function(e) {
                if ($(e.target).is(this)) closeModal($(this));
            });
            $('#AddDepartmentModal #cancelBtn, #AddDepartmentModal #closeModalBtn').click(function() {
                closeModal($('#AddDepartmentModal'));
            });
            $('#EditDepartmentModal #cancelBtn, #EditDepartmentModal #closeModalBtn').click(function() {
                closeModal($('#EditDepartmentModal'));
            });

            // Add Department Form Submit
            const $addForm = $('#AddDepartmentForm');
            const $addError = $('<div class="text-red-500 text-sm mb-2"></div>').prependTo($addForm);

            $addForm.submit(function(e) {
                e.preventDefault();
                $addError.empty();

                const DepartmentData = {
                    Name: $('#Name').val().trim(),
                    Code: $('#Code').val().trim(),
                    HeadId: parseInt($('#AddHead').val()),
                };

                const errors = [];
                if (!DepartmentData.Name) errors.push('Name is required.');
                if (!DepartmentData.Code) errors.push('Code is required.');
                if (errors.length) { $addError.html(errors.join('<br>')); return; }

                $.ajax({
                    url: '/api/departments/add',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(DepartmentData),
                    success: function() {
                        $addForm[0].reset();
                        closeModal($('#AddDepartmentModal'));
                        loadDepartments(currentPage); // refresh current page
                    },
                    error: function(xhr) {
                        const errorData = xhr.responseJSON;
                        if (errorData.errors) $addError.html(errorData.errors.join('<br>'));
                        else if (errorData.message) $addError.html(errorData.message);
                        else $addError.html('An unknown error occurred.');
                    }
                });
            });

            // Edit Department
            $(document).on('click', '.edit-btn', function() {
                const id = $(this).data('id');
                const $modal = $('#EditDepartmentModal');

                $.getJSON(`/api/departments/${id}`, function(Department) {
                    $('#EditDepartmentId').val(Department.id);
                    $('#EditName').val(Department.name);
                    $('#EditCode').val(Department.code);
                    loadEmployeesIntoSelect('EditHead', Department.headId);
                    $modal.removeClass('hidden').addClass('flex');
                });
            });

            // Edit Department Submit
            const $editForm = $('#EditDepartmentForm');
            const $editError = $('<div class="text-red-500 text-sm mb-2"></div>').prependTo($editForm);

            $editForm.submit(function(e) {
                e.preventDefault();
                $editError.empty();

                const id = $('#EditDepartmentId').val();
                const DepartmentData = {
                    id: id,
                    Name: $('#EditName').val().trim(),
                    Code: $('#EditCode').val().trim(),
                    HeadId: parseInt($('#EditHead').val()),
                };

                const errors = [];
                if (!DepartmentData.Name) errors.push('Name is required.');
                if (!DepartmentData.Code) errors.push('Code is required.');
                if (errors.length) { $editError.html(errors.join('<br>')); return; }

                $.ajax({
                    url: `/api/departments/edit/${id}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(DepartmentData),
                    success: function() {
                        closeModal($('#EditDepartmentModal'));
                        loadDepartments(currentPage); // refresh current page
                    },
                    error: function(xhr) {
                        const errorData = xhr.responseJSON;
                        if (errorData.errors) $editError.html(errorData.errors.join('<br>'));
                        else if (errorData.message) $editError.html(errorData.message);
                        else $editError.html('An unknown error occurred.');
                    }
                });
            });

            // Delete Department
            $(document).on('click', '.delete-btn', function() {
                if (!confirm('Are you sure you want to delete this department?')) return;
                const id = $(this).data('id');
                $.ajax({
                    url: `/api/departments/delete/${id}`,
                    method: 'DELETE',
                    success: function() { loadDepartments(currentPage); },
                    error: function() { alert('Failed to delete Department.'); }
                });
            });

            // Initial load
            loadDepartments();
            loadEmployeesIntoSelect('EditHead');
            $('#departmentFilter').val(null)
        });
    </script>
}

